{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorForm\\\\CalculatorForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, Formik } from 'formik';\nimport './CalculatorForm.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\n\nclass CalculatorForm extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      workedMonth: 1\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n  }\n\n  validateWorkedHoursInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Worked hours is required';\n    } else if (isNaN(inputValue)) {\n      error = 'Invalid input format';\n    } else if (inputValue < 0 || inputValue > 300) {\n      error = 'Invalid worked hours';\n    }\n\n    return error;\n  }\n\n  validateHourlyFeeInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Hourly fee is required';\n    } else if (isNaN(inputValue)) {\n      error = 'Invalid input format';\n    } else if (inputValue < 1 || inputValue > 1000) {\n      error = 'Invalid hourly fee';\n    }\n\n    return error;\n  }\n\n  render() {\n    return React.createElement(Formik, {\n      initialValues: {\n        workedHoursInput: '',\n        hourlyFeeInput: ''\n      },\n      onSubmit: formFields => {\n        let workedMonth = this.state.workedMonth;\n        formFields = _objectSpread({}, formFields, {\n          workedMonth\n        });\n        this.props.handleSubmitForm(formFields);\n      },\n      onReset: () => {\n        this.props.handleReset();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(Form, {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"workedHoursInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Worked Hours:\"), React.createElement(Field, {\n      validate: this.validateWorkedHoursInput,\n      name: \"workedHoursInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), errors.workedHoursInput && touched.workedHoursInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, errors.workedHoursInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Month:\"), React.createElement(DynamicSelect, {\n      monthName: this.props.monthName,\n      monthsWorkingHours: this.props.monthsWorkingHours,\n      onSelectChange: this.handleSelectChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"hourlyFeeInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Hourly Fee:\"), React.createElement(Field, {\n      validate: this.validateHourlyFeeInput,\n      name: \"hourlyFeeInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), errors.hourlyFeeInput && touched.hourlyFeeInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, errors.hourlyFeeInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"button\",\n      type: \"submit\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Calculate!\"), React.createElement(Button, {\n      className: \"button\",\n      type: \"reset\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.props.errorMessage)));\n  }\n\n}\n\nexport default CalculatorForm;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorForm/CalculatorForm.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","Formik","DynamicSelect","CalculatorForm","state","workedMonth","handleSelectChange","selectedValue","setState","parseInt","validateWorkedHoursInput","inputValue","error","isNaN","validateHourlyFeeInput","render","workedHoursInput","hourlyFeeInput","formFields","props","handleSubmitForm","handleReset","errors","touched","monthName","monthsWorkingHours","errorMessage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport './CalculatorForm.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\n\r\nclass CalculatorForm extends Component {\r\n    state = {\r\n        workedMonth: 1\r\n    }\r\n    \r\n    validateWorkedHoursInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Worked hours is required';\r\n        } else if (isNaN(inputValue)) {\r\n            error = 'Invalid input format';\r\n        } else if (inputValue < 0 || inputValue > 300) {\r\n            error = 'Invalid worked hours'\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateHourlyFeeInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Hourly fee is required';\r\n        } else if (isNaN(inputValue)) {\r\n            error = 'Invalid input format';\r\n        } else if (inputValue < 1 || inputValue > 1000) {\r\n            error = 'Invalid hourly fee'\r\n        }\r\n        return error;\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    workedHoursInput: '',\r\n                    hourlyFeeInput: '',\r\n                }}\r\n\r\n                onSubmit={formFields => {\r\n                    let workedMonth = this.state.workedMonth;\r\n                    formFields = {\r\n                        ...formFields,\r\n                        workedMonth\r\n                    }\r\n                    this.props.handleSubmitForm(formFields);\r\n                }}\r\n\r\n                onReset={() => {\r\n                    this.props.handleReset();\r\n                }}\r\n            >\r\n                {({ errors, touched }) => (\r\n                    <Form className=\"form\">\r\n                        <FormGroup>\r\n                            <Label className=\"label\" for=\"workedHoursInput\">Worked Hours:</Label>\r\n                            <Field validate={this.validateWorkedHoursInput} name=\"workedHoursInput\" type=\"name\"\r\n                                className={'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : '')} />\r\n                            {errors.workedHoursInput && touched.workedHoursInput && <div className=\"error-message\">{errors.workedHoursInput}</div>}\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label className=\"label\">Month:</Label>\r\n                            <DynamicSelect\r\n                                monthName={this.props.monthName}\r\n                                monthsWorkingHours={this.props.monthsWorkingHours}\r\n                                onSelectChange={this.handleSelectChange} />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label className=\"label\" for=\"hourlyFeeInput\">Hourly Fee:</Label>\r\n                            <Field validate={this.validateHourlyFeeInput} name=\"hourlyFeeInput\" type=\"name\"\r\n                                className={'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : '')} />\r\n                            {errors.hourlyFeeInput && touched.hourlyFeeInput && <div className=\"error-message\">{errors.hourlyFeeInput}</div>}\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Button className=\"button\" type=\"submit\" color=\"secondary\">Calculate!</Button>\r\n                            <Button className=\"button\" type=\"reset\" color=\"secondary\">Reset</Button>\r\n                        </FormGroup>\r\n                        <div className=\"error-message\">\r\n                            {this.props.errorMessage}\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorForm;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      monthsWorkingHours: [],\n      workingHoursInMonth: 0,\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        this.setState({\n          monthsWorkingHours: response.data\n        });\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {\n      this.setState({\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      initialValues: {\n        workedHoursInput: '',\n        hourlyFeeInput: ''\n      },\n      validationSchema: Yup.object().shape({\n        workedHoursInput: Yup.string().required('Worked hours is required'),\n        hourlyFeeInput: Yup.string().required('Hourly fee is required')\n      }),\n      onSubmit: formFields => {\n        this.setState({\n          errorMessage: null\n        });\n        let workedMonth = this.state.workedMonth;\n        formFields = _objectSpread({}, formFields, {\n          workedMonth\n        });\n        formFields.workedHours = parseInt(formFields.workedHoursInput);\n        formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\n\n        if (isNaN(formFields.workedHours) || isNaN(formFields.hourlyFee)) {\n          this.setState({\n            errorMessage: \"Invalid input.\"\n          });\n        } else {\n          Axios.post('http://192.168.0.5:5000/salarycalculator', formFields).then(response => {\n            console.log(response.data);\n            this.setState({\n              isSummaryVisible: true,\n              workedHours: formFields.workedHoursInput,\n              hourlyFee: formFields.hourlyFeeInput,\n              overHoursAmount: response.data.overHoursAmount,\n              overHoursGrossIncome: response.data.overHoursGrossIncome,\n              overHoursNetIncome: response.data.overHoursNetIncome,\n              totalGrossIncome: response.data.totalGrossIncome,\n              totalNetIncome: response.data.totalNetIncome\n            });\n          }).catch(error => {\n            if (!isNullOrUndefined(error.response.data.message)) {\n              this.setState({\n                errorMessage: error.response.data.message\n              });\n            }\n\n            console.log(error.response);\n          });\n        }\n      },\n      onReset: () => {\n        this.setState({\n          errorMessage: null,\n          isSummaryVisible: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Formik, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default CalculatorInputs;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","ErrorMessage","Formik","Yup","Axios","DynamicSelect","CalculatorSummary","isNullOrUndefined","CalculatorInputs","state","monthsWorkingHours","workingHoursInMonth","errorMessage","isSummaryVisible","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","setState","data","handleSelectChange","selectedValue","parseInt","handleCloseSummary","render","workedHoursInput","hourlyFeeInput","object","shape","string","required","formFields","workedHours","hourlyFee","isNaN","post","console","log","catch","error","message"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        monthsWorkingHours: [],\r\n        workingHoursInMonth: 0,\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({ monthsWorkingHours: response.data })\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n        this.setState({ isSummaryVisible: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    initialValues={{\r\n                        workedHoursInput: '',\r\n                        hourlyFeeInput: ''\r\n                    }}\r\n                    validationSchema={Yup.object().shape({\r\n                        workedHoursInput: Yup.string()\r\n                            .required('Worked hours is required'),\r\n                        hourlyFeeInput: Yup.string()\r\n                            .required('Hourly fee is required'),\r\n                    })}\r\n                    onSubmit={formFields => {\r\n                        this.setState({ errorMessage: null });\r\n                        let workedMonth = this.state.workedMonth;\r\n                        formFields = {\r\n                            ...formFields,\r\n                            workedMonth\r\n                        };\r\n                        formFields.workedHours = parseInt(formFields.workedHoursInput);\r\n                        formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\r\n                        if (isNaN(formFields.workedHours) || isNaN(formFields.hourlyFee)) {\r\n                            this.setState({ errorMessage: \"Invalid input.\" });\r\n                        } else {\r\n                            Axios.post('http://192.168.0.5:5000/salarycalculator', formFields)\r\n                                .then(response => {\r\n                                    console.log(response.data)\r\n                                    this.setState({\r\n                                        isSummaryVisible: true,\r\n                                        workedHours: formFields.workedHoursInput,\r\n                                        hourlyFee: formFields.hourlyFeeInput,\r\n                                        overHoursAmount: response.data.overHoursAmount,\r\n                                        overHoursGrossIncome: response.data.overHoursGrossIncome,\r\n                                        overHoursNetIncome: response.data.overHoursNetIncome,\r\n                                        totalGrossIncome: response.data.totalGrossIncome,\r\n                                        totalNetIncome: response.data.totalNetIncome\r\n                                    })\r\n                                })\r\n                                .catch(error => {\r\n                                    if (!isNullOrUndefined(error.response.data.message)) {\r\n                                        this.setState({ errorMessage: error.response.data.message })\r\n                                    }\r\n                                    console.log(error.response);\r\n                                })\r\n                        }\r\n                    }}\r\n                    onReset={() => {\r\n                        this.setState({\r\n                            errorMessage: null,\r\n                            isSummaryVisible: false\r\n                        });\r\n                    }}></Formik>\r\n                <Formik>\r\n\r\n                </Formik>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default CalculatorInputs;"]},"metadata":{},"sourceType":"module"}
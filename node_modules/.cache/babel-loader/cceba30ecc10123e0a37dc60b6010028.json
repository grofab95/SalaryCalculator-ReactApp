{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, Formik } from 'formik';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport CalculatorForm from '../CalculatorForm/CalculatorForm';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      monthsWorkingHours: [],\n      workingHoursInMonth: 0,\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        this.setState({\n          monthsWorkingHours: response.data\n        });\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {\n      this.setState({\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  validateWorkedHoursInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Worked hours is required';\n    }\n\n    return error;\n  }\n\n  validateHourlyFeeInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Hourly fee is required';\n    }\n\n    return error;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Salary Calculator\"), React.createElement(CalculatorForm, {\n      monthName: this.state.monthName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), this.state.isSummaryVisible ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(CalculatorSummary, {\n      workedMonthName: this.state.monthName[this.state.workedMonth - 1],\n      workingHoursInMonth: this.state.monthsWorkingHours[this.state.workedMonth - 1],\n      workedHours: this.state.workedHours,\n      hourlyFee: this.state.hourlyFee,\n      overHoursAmount: this.state.overHoursAmount,\n      overHoursGrossIncome: this.state.overHoursGrossIncome,\n      overHoursNetIncome: this.state.overHoursNetIncome,\n      totalGrossIncome: this.state.totalGrossIncome,\n      totalNetIncome: this.state.totalNetIncome,\n      handleCloseSummary: this.handleCloseSummary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), \" \") : \"\");\n  }\n\n}\n\nexport default CalculatorInputs;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","Formik","Axios","CalculatorForm","DynamicSelect","CalculatorSummary","isNullOrUndefined","CalculatorInputs","state","monthsWorkingHours","workingHoursInMonth","errorMessage","isSummaryVisible","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","setState","data","handleSelectChange","selectedValue","parseInt","handleCloseSummary","validateWorkedHoursInput","inputValue","error","validateHourlyFeeInput","render","workedHours","hourlyFee"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport CalculatorForm from '../CalculatorForm/CalculatorForm';\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        monthsWorkingHours: [],\r\n        workingHoursInMonth: 0,\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({ monthsWorkingHours: response.data })\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n        this.setState({ isSummaryVisible: false });\r\n    }\r\n\r\n    validateWorkedHoursInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Worked hours is required';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateHourlyFeeInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Hourly fee is required';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Salary Calculator</h1>\r\n                <CalculatorForm\r\n                    monthName={this.state.monthName} />\r\n                {this.state.isSummaryVisible ? <div><CalculatorSummary\r\n                    workedMonthName={this.state.monthName[this.state.workedMonth - 1]}\r\n                    workingHoursInMonth={this.state.monthsWorkingHours[this.state.workedMonth - 1]}\r\n                    workedHours={this.state.workedHours}\r\n                    hourlyFee={this.state.hourlyFee}\r\n                    overHoursAmount={this.state.overHoursAmount}\r\n                    overHoursGrossIncome={this.state.overHoursGrossIncome}\r\n                    overHoursNetIncome={this.state.overHoursNetIncome}\r\n                    totalGrossIncome={this.state.totalGrossIncome}\r\n                    totalNetIncome={this.state.totalNetIncome}\r\n                    handleCloseSummary={this.handleCloseSummary}\r\n                /> </div> : \"\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalculatorInputs;"]},"metadata":{},"sourceType":"module"}
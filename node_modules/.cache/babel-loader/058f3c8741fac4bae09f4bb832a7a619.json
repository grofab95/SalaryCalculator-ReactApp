{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      monthWorkingHours: [],\n      workingHoursInMonth: 0,\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        this.setState({\n          monthWorkingHours: response.data\n        });\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {\n      this.setState({\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(Formik, {\n      initialValues: {\n        workedHoursInput: '',\n        hourlyFeeInput: ''\n      },\n      validationSchema: Yup.object().shape({\n        workedHoursInput: Yup.string().required('Worked hours is required'),\n        hourlyFeeInput: Yup.string().required('Hourly fee is required')\n      }),\n      onSubmit: fields => {\n        let workedMonth = this.state.workedMonth;\n\n        let intFields = _objectSpread({}, fields, {\n          workedMonth\n        });\n\n        intFields.workedHours = parseInt(intFields.workedHoursInput);\n        intFields.hourlyFee = parseInt(intFields.hourlyFeeInput);\n        Axios.post('http://192.168.0.5:5000/salarycalculator', intFields).then(response => {\n          console.log(response.data);\n          this.setState({\n            isSummaryVisible: true,\n            workedHours: intFields.workedHoursInput,\n            hourlyFee: intFields.hourlyFeeInput,\n            overHoursAmount: response.data.overHoursAmount,\n            overHoursGrossIncome: response.data.overHoursGrossIncome,\n            overHoursNetIncome: response.data.overHoursNetIncome,\n            totalGrossIncome: response.data.totalGrossIncome,\n            totalNetIncome: response.data.totalNetIncome\n          });\n        }).catch(error => {\n          // this.setState({ errorMessage: error.response })\n          console.log(\"ERRORRS: \" + error);\n        });\n      },\n      render: ({\n        errors\n      }) => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"workedHoursInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Worked Hours:\"), React.createElement(Field, {\n        name: \"workedHoursInput\",\n        type: \"name\",\n        className: 'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"workedHoursInput\",\n        component: \"div\",\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(Label, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Month:\"), React.createElement(DynamicSelect, {\n        monthName: this.state.monthName,\n        monthWorkingHours: this.state.monthWorkingHours,\n        onSelectChange: this.handleSelectChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"hourlyFeeInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"Hourly Fee:\"), React.createElement(Field, {\n        name: \"hourlyFeeInput\",\n        type: \"name\",\n        className: 'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"hourlyFeeInput\",\n        component: \"div\",\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"button\",\n        type: \"submit\",\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Calculate!\"), React.createElement(Button, {\n        className: \"button\",\n        type: \"reset\",\n        color: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Reset\")), React.createElement(\"div\", {\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, this.state.errorMessage)), this.state.isSummaryVisible ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(CalculatorSummary, {\n        workedMonthName: this.state.monthName[this.state.workedMonth - 1],\n        workingHoursInMonth: this.state.workingHoursInMonth[this.state.workedMonth],\n        workedHours: this.state.workedHours,\n        hourlyFee: this.state.hourlyFee,\n        overHoursAmount: this.state.overHoursAmount,\n        overHoursGrossIncome: this.state.overHoursGrossIncome,\n        overHoursAmount: this.state.overHoursAmount,\n        overHoursNetIncome: this.state.overHoursNetIncome,\n        totalGrossIncome: this.state.totalGrossIncome,\n        totalNetIncome: this.state.totalNetIncome,\n        handleCloseSummary: this.handleCloseSummary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), \" \") : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default withErrorHandler(CalculatorInputs, Axios);","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","ErrorMessage","Formik","Yup","Axios","DynamicSelect","CalculatorSummary","withErrorHandler","CalculatorInputs","state","monthWorkingHours","workingHoursInMonth","errorMessage","isSummaryVisible","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","setState","data","handleSelectChange","selectedValue","parseInt","handleCloseSummary","render","workedHoursInput","hourlyFeeInput","object","shape","string","required","fields","intFields","workedHours","hourlyFee","post","console","log","catch","error","errors"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        monthWorkingHours: [],\r\n        workingHoursInMonth: 0,\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({ monthWorkingHours: response.data })\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n        this.setState({isSummaryVisible: false});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    workedHoursInput: '',\r\n                    hourlyFeeInput: ''\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    workedHoursInput: Yup.string()\r\n                        .required('Worked hours is required'),\r\n                        hourlyFeeInput: Yup.string()\r\n                        .required('Hourly fee is required'),\r\n                })}\r\n                onSubmit={fields => {\r\n                    let workedMonth = this.state.workedMonth;\r\n                    let intFields = {\r\n                        ...fields,\r\n                        workedMonth\r\n                    };\r\n                    intFields.workedHours = parseInt(intFields.workedHoursInput);\r\n                    intFields.hourlyFee = parseInt(intFields.hourlyFeeInput);\r\n\r\n                    Axios.post('http://192.168.0.5:5000/salarycalculator', intFields)\r\n                        .then(response => {\r\n                            console.log(response.data)\r\n                            this.setState({\r\n                                isSummaryVisible: true,\r\n                                workedHours: intFields.workedHoursInput,\r\n                                hourlyFee: intFields.hourlyFeeInput,\r\n                                overHoursAmount: response.data.overHoursAmount,\r\n                                overHoursGrossIncome: response.data.overHoursGrossIncome,\r\n                                overHoursNetIncome: response.data.overHoursNetIncome,\r\n                                totalGrossIncome: response.data.totalGrossIncome,\r\n                                totalNetIncome: response.data.totalNetIncome\r\n                            })\r\n                        })                        \r\n                        .catch(error => {\r\n                           // this.setState({ errorMessage: error.response })\r\n                            console.log(\"ERRORRS: \" + error);\r\n                        })\r\n                }}\r\n                render={({ errors }) => (\r\n                    <div>\r\n                        <Form className=\"form\">\r\n                            <FormGroup>\r\n                                <Label for=\"workedHoursInput\">Worked Hours:</Label>\r\n                                <Field name=\"workedHoursInput\" type=\"name\" className={'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"workedHoursInput\" component=\"div\" className=\"error-message\" />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label>Month:</Label>\r\n                                <DynamicSelect\r\n                                    monthName={this.state.monthName}\r\n                                    monthWorkingHours={this.state.monthWorkingHours}\r\n                                    onSelectChange={this.handleSelectChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"hourlyFeeInput\">Hourly Fee:</Label>\r\n                                <Field name=\"hourlyFeeInput\" type=\"name\" className={'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"hourlyFeeInput\" component=\"div\" className=\"error-message\" />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Button className=\"button\" type=\"submit\" color=\"secondary\">Calculate!</Button>\r\n                                <Button className=\"button\" type=\"reset\" color=\"secondary\">Reset</Button>\r\n                            </FormGroup>\r\n                            <div className=\"error-message\">\r\n                                {this.state.errorMessage}\r\n                            </div>\r\n                        </Form>\r\n                        {this.state.isSummaryVisible ? <div><CalculatorSummary\r\n                            workedMonthName={this.state.monthName[this.state.workedMonth - 1]}\r\n                            workingHoursInMonth={this.state.workingHoursInMonth[this.state.workedMonth]}\r\n                            workedHours={this.state.workedHours}\r\n                            hourlyFee={this.state.hourlyFee}\r\n                            overHoursAmount={this.state.overHoursAmount}\r\n                            overHoursGrossIncome={this.state.overHoursGrossIncome}\r\n                            overHoursAmount={this.state.overHoursAmount}\r\n                            overHoursNetIncome={this.state.overHoursNetIncome}\r\n                            totalGrossIncome={this.state.totalGrossIncome}\r\n                            totalNetIncome={this.state.totalNetIncome}\r\n                            handleCloseSummary={this.handleCloseSummary}\r\n                        /> </div> : \"\"}\r\n                    </div>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default withErrorHandler(CalculatorInputs, Axios);"]},"metadata":{},"sourceType":"module"}
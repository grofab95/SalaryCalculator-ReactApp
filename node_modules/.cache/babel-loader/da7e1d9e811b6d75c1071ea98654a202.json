{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorForm\\\\CalculatorForm.js\";\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, Formik } from 'formik';\nimport Axios from 'axios';\nimport './CalculatorForm.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorForm extends Component {\n  validateWorkedHoursInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Worked hours is required';\n    }\n\n    return error;\n  }\n\n  validateHourlyFeeInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Hourly fee is required';\n    }\n\n    return error;\n  }\n\n  render() {\n    return React.createElement(Formik, {\n      initialValues: {\n        workedHoursInput: '',\n        hourlyFeeInput: ''\n      },\n      onSubmit: formFields => {\n        console.log(formFields);\n      },\n      onReset: () => {\n        this.setState({\n          errorMessage: null,\n          isSummaryVisible: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(Form, {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"workedHoursInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Worked Hours:\"), React.createElement(Field, {\n      validate: this.validateWorkedHoursInput,\n      name: \"workedHoursInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), errors.workedHoursInput && touched.workedHoursInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, errors.workedHoursInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Month:\")), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"hourlyFeeInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Hourly Fee:\"), React.createElement(Field, {\n      validate: this.validateHourlyFeeInput,\n      name: \"hourlyFeeInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), errors.hourlyFeeInput && touched.hourlyFeeInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, errors.hourlyFeeInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"button\",\n      type: \"submit\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Calculate!\"), React.createElement(Button, {\n      className: \"button\",\n      type: \"reset\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, this.props.errorMessage)));\n  }\n\n}\n\nexport default CalculatorForm;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorForm/CalculatorForm.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","Formik","Axios","DynamicSelect","isNullOrUndefined","CalculatorForm","validateWorkedHoursInput","inputValue","error","validateHourlyFeeInput","render","workedHoursInput","hourlyFeeInput","formFields","console","log","setState","errorMessage","isSummaryVisible","errors","touched","props"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport Axios from 'axios';\r\nimport './CalculatorForm.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorForm extends Component {\r\n    validateWorkedHoursInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Worked hours is required';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateHourlyFeeInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Hourly fee is required';\r\n        }\r\n        return error;\r\n    }\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    workedHoursInput: '',\r\n                    hourlyFeeInput: '',\r\n                }}\r\n                onSubmit={formFields => {\r\n                    console.log(formFields);\r\n                }}\r\n                onReset={() => {\r\n                    this.setState({\r\n                        errorMessage: null,\r\n                        isSummaryVisible: false\r\n                    });\r\n                }}\r\n            >\r\n                {({ errors, touched }) => (\r\n                    <Form className=\"form\">\r\n                        <FormGroup>\r\n                            <Label className=\"label\" for=\"workedHoursInput\">Worked Hours:</Label>\r\n                            <Field validate={this.validateWorkedHoursInput} name=\"workedHoursInput\" type=\"name\"\r\n                                className={'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : '')} />\r\n                            {errors.workedHoursInput && touched.workedHoursInput && <div className=\"error-message\">{errors.workedHoursInput}</div>}\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label className=\"label\">Month:</Label>\r\n                            \r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label className=\"label\" for=\"hourlyFeeInput\">Hourly Fee:</Label>\r\n                            <Field validate={this.validateHourlyFeeInput} name=\"hourlyFeeInput\" type=\"name\"\r\n                                className={'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : '')} />\r\n                            {errors.hourlyFeeInput && touched.hourlyFeeInput && <div className=\"error-message\">{errors.hourlyFeeInput}</div>}\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Button className=\"button\" type=\"submit\" color=\"secondary\">Calculate!</Button>\r\n                            <Button className=\"button\" type=\"reset\" color=\"secondary\">Reset</Button>\r\n                        </FormGroup>\r\n                        <div className=\"error-message\">\r\n                            {this.props.errorMessage}\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorForm;"]},"metadata":{},"sourceType":"module"}
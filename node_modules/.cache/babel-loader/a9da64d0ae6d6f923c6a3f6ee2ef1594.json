{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      errorMessage: '',\n      dataSumbit: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        console.log(response.data);\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {};\n  }\n\n  render() {\n    return React.createElement(Formik, {\n      initialValues: {\n        workedHours: '',\n        hourlyFee: ''\n      },\n      validationSchema: Yup.object().shape({\n        workedHours: Yup.string().required('Worked hours is required'),\n        hourlyFee: Yup.string().required('Hourly fee is required')\n      }),\n      onSubmit: fields => {\n        let workedMonth = this.state.workedMonth;\n\n        let intFields = _objectSpread({}, fields, {\n          workedMonth\n        });\n\n        intFields.workedHours = parseInt(intFields.workedHours);\n        intFields.hourlyFee = parseInt(intFields.hourlyFee);\n        Axios.post('http://192.168.0.5:5000/salarycalculator', intFields).then(response => {\n          console.log(response.data);\n          this.setState({\n            dataSumbit: true,\n            workedHours: intFields.workedHours,\n            hourlyFee: intFields.hourlyFee,\n            overHoursAmount: response.data.overHoursAmount,\n            overHoursGrossIncome: response.data.overHoursGrossIncome,\n            overHoursNetIncome: response.data.overHoursNetIncome,\n            totalGrossIncome: response.data.totalGrossIncome,\n            totalNetIncome: response.data.totalNetIncome\n          });\n        }).catch(error => {\n          this.setState({\n            errorMessage: error.response.data.message\n          });\n        });\n      },\n      render: ({\n        errors\n      }) => React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"workedHours\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Worked Hours:\"), React.createElement(Field, {\n        name: \"workedHours\",\n        type: \"name\",\n        className: 'form-control' + (errors.workedMonth && errors.workedMonth ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"workedHours\",\n        component: \"div\",\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"workedHours\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Month:\"), React.createElement(DynamicSelect, {\n        arrayOfData: this.state.monthName,\n        onSelectChange: this.handleSelectChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(Label, {\n        for: \"hourlyFee\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, \"Hourly Fee:\"), React.createElement(Field, {\n        name: \"hourlyFee\",\n        type: \"name\",\n        className: 'form-control' + (errors.hourlyFee && errors.hourlyFee ? ' is-invalid' : ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(ErrorMessage, {\n        name: \"hourlyFee\",\n        component: \"div\",\n        className: \"error-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })), React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: \"button\",\n        type: \"submit\",\n        color: \"secondary\",\n        className: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \"Calculate!\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, this.state.errorMessage)), this.state.dataSumbit ? React.createElement(\"div\", {\n        className: \"summary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(CalculatorSummary, {\n        workedMonthName: this.state.monthName[this.state.workedMonth - 1],\n        workedHoursInMonth: this.state.workedHoursInMonth,\n        workedHours: this.state.workedHours,\n        hourlyFee: this.state.hourlyFee,\n        overHoursAmount: this.state.overHoursAmount,\n        overHoursGrossIncome: this.state.overHoursGrossIncome,\n        overHoursAmount: this.state.overHoursAmount,\n        overHoursNetIncome: this.state.overHoursNetIncome,\n        totalGrossIncome: this.state.totalGrossIncome,\n        totalNetIncome: this.state.totalNetIncome,\n        onCloseSummary: this.handleCloseSummary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), \" \") : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default CalculatorInputs;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","ErrorMessage","Formik","Yup","Axios","DynamicSelect","CalculatorSummary","CalculatorInputs","state","errorMessage","dataSumbit","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","console","log","data","handleSelectChange","selectedValue","setState","parseInt","handleCloseSummary","render","workedHours","hourlyFee","object","shape","string","required","fields","intFields","post","catch","error","message","errors","workedHoursInMonth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect'\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary'\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        errorMessage: '',\r\n        dataSumbit: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                console.log(response.data)\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    workedHours: '',\r\n                    hourlyFee: ''\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    workedHours: Yup.string()\r\n                        .required('Worked hours is required'),\r\n                    hourlyFee: Yup.string()\r\n                        .required('Hourly fee is required'),\r\n                })}\r\n                onSubmit={fields => {\r\n                    let workedMonth = this.state.workedMonth;\r\n                    let intFields = {\r\n                        ...fields,\r\n                        workedMonth\r\n                    };\r\n                    intFields.workedHours = parseInt(intFields.workedHours);\r\n                    intFields.hourlyFee = parseInt(intFields.hourlyFee);\r\n\r\n                    Axios.post('http://192.168.0.5:5000/salarycalculator', intFields)\r\n                        .then(response => {\r\n                            console.log(response.data)\r\n                            this.setState({\r\n                                dataSumbit: true,\r\n                                workedHours: intFields.workedHours,\r\n                                hourlyFee: intFields.hourlyFee,\r\n                                overHoursAmount: response.data.overHoursAmount,\r\n                                overHoursGrossIncome: response.data.overHoursGrossIncome,\r\n                                overHoursNetIncome: response.data.overHoursNetIncome,\r\n                                totalGrossIncome: response.data.totalGrossIncome,\r\n                                totalNetIncome: response.data.totalNetIncome\r\n                            })\r\n                        })\r\n                        .catch(error => {\r\n                            this.setState({ errorMessage: error.response.data.message })\r\n                        })\r\n                }}\r\n                render={({ errors }) => (\r\n                    <div>\r\n                        <Form className=\"form\">\r\n                            <FormGroup>\r\n                                <Label for=\"workedHours\">Worked Hours:</Label>\r\n                                <Field name=\"workedHours\" type=\"name\" className={'form-control' + (errors.workedMonth && errors.workedMonth ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"workedHours\" component=\"div\" className=\"error-message\" />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"workedHours\">Month:</Label>\r\n                                <DynamicSelect\r\n                                    arrayOfData={this.state.monthName}\r\n                                    onSelectChange={this.handleSelectChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label for=\"hourlyFee\">Hourly Fee:</Label>\r\n                                <Field name=\"hourlyFee\" type=\"name\" className={'form-control' + (errors.hourlyFee && errors.hourlyFee ? ' is-invalid' : '')} />\r\n                                <ErrorMessage name=\"hourlyFee\" component=\"div\" className=\"error-message\" />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Button className=\"button\" type=\"submit\" color=\"secondary\" className=\"button\">Calculate!</Button>\r\n                            </FormGroup>\r\n                            <div>\r\n                                {this.state.errorMessage}\r\n                            </div>\r\n                        </Form>\r\n                        {this.state.dataSumbit ? <div className=\"summary\"><CalculatorSummary\r\n                            workedMonthName={this.state.monthName[this.state.workedMonth - 1]}\r\n                            workedHoursInMonth={this.state.workedHoursInMonth}\r\n                            workedHours={this.state.workedHours}\r\n                            hourlyFee={this.state.hourlyFee}\r\n                            overHoursAmount={this.state.overHoursAmount}\r\n                            overHoursGrossIncome={this.state.overHoursGrossIncome}\r\n                            overHoursAmount={this.state.overHoursAmount}\r\n                            overHoursNetIncome={this.state.overHoursNetIncome}\r\n                            totalGrossIncome={this.state.totalGrossIncome}\r\n                            totalNetIncome={this.state.totalNetIncome}\r\n                            onCloseSummary={this.handleCloseSummary}\r\n                        /> </div>: \"\"}\r\n\r\n                    </div>\r\n                )}\r\n                    />\r\n                )\r\n            }\r\n        }\r\n        \r\nexport default CalculatorInputs;"]},"metadata":{},"sourceType":"module"}
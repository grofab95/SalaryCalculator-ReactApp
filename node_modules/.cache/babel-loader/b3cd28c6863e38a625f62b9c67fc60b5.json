{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      monthsWorkingHours: [],\n      workingHoursInMonth: 0,\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        this.setState({\n          monthsWorkingHours: response.data\n        });\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {\n      this.setState({\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  validateEmail(value) {\n    let error;\n\n    if (!value) {\n      error = 'Required';\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n      error = 'Invalid email address';\n    }\n\n    return error;\n  }\n\n  validateUsername(value) {\n    let error;\n\n    if (value === 'admin') {\n      error = 'Nice try!';\n    }\n\n    return error;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Signup\"), React.createElement(Formik, {\n      initialValues: {\n        username: '',\n        email: ''\n      },\n      onSubmit: values => {\n        // same shape as initial values\n        console.log(values);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, ({\n      errors,\n      touched,\n      isValidating\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"email\",\n      validate: validateEmail,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), errors.email && touched.email && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, errors.email), React.createElement(Field, {\n      name: \"username\",\n      validate: validateUsername,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), errors.username && touched.username && React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, errors.username), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default CalculatorInputs;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","ErrorMessage","Formik","Yup","Axios","DynamicSelect","CalculatorSummary","isNullOrUndefined","CalculatorInputs","state","monthsWorkingHours","workingHoursInMonth","errorMessage","isSummaryVisible","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","setState","data","handleSelectChange","selectedValue","parseInt","handleCloseSummary","validateEmail","value","error","test","validateUsername","render","username","email","values","console","log","errors","touched","isValidating"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,KAA5B,QAAyC,YAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,YAAtB,EAAoCC,MAApC,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AAEA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,SAASC,iBAAT,QAAkC,MAAlC;;AAEA,MAAMC,gBAAN,SAA+Bb,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACrCc,KADqC,GAC7B;AACJC,MAAAA,kBAAkB,EAAE,EADhB;AAEJC,MAAAA,mBAAmB,EAAE,CAFjB;AAGJC,MAAAA,YAAY,EAAE,EAHV;AAIJC,MAAAA,gBAAgB,EAAE,KAJd;AAKJC,MAAAA,WAAW,EAAE,CALT;AAMJC,MAAAA,eAAe,EAAE,CANb;AAOJC,MAAAA,oBAAoB,EAAE,CAPlB;AAQJC,MAAAA,kBAAkB,EAAE,CARhB;AASJC,MAAAA,gBAAgB,EAAE,CATd;AAUJC,MAAAA,cAAc,EAAE,CAVZ;AAWJC,MAAAA,SAAS,EAAE,CACP,SADO,EACI,UADJ,EACgB,OADhB,EACyB,OADzB,EACkC,KADlC,EACyC,MADzC,EACiD,MADjD,EACyD,QADzD,EACmE,WADnE,EACgF,SADhF,EAC2F,UAD3F,EACuG,UADvG;AAXP,KAD6B;;AAAA,SAiBrCC,iBAjBqC,GAiBjB,MAAM;AACtBjB,MAAAA,KAAK,CAACkB,GAAN,CAAU,0CAAV,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,aAAKC,QAAL,CAAc;AAAEf,UAAAA,kBAAkB,EAAEc,QAAQ,CAACE;AAA/B,SAAd;AACH,OAHL;AAIH,KAtBoC;;AAAA,SAwBrCC,kBAxBqC,GAwBfC,aAAD,IAAmB;AACpC,WAAKH,QAAL,CAAc;AACVX,QAAAA,WAAW,EAAEe,QAAQ,CAACD,aAAD,CAAR,GAA0B;AAD7B,OAAd;AAGH,KA5BoC;;AAAA,SA8BrCE,kBA9BqC,GA8BhB,MAAM;AACvB,WAAKL,QAAL,CAAc;AAAEZ,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACH,KAhCoC;AAAA;;AAkCrCkB,EAAAA,aAAa,CAACC,KAAD,EAAQ;AACjB,QAAIC,KAAJ;;AACA,QAAI,CAACD,KAAL,EAAY;AACRC,MAAAA,KAAK,GAAG,UAAR;AACH,KAFD,MAEO,IAAI,CAAC,4CAA4CC,IAA5C,CAAiDF,KAAjD,CAAL,EAA8D;AACjEC,MAAAA,KAAK,GAAG,uBAAR;AACH;;AACD,WAAOA,KAAP;AACH;;AAEDE,EAAAA,gBAAgB,CAACH,KAAD,EAAQ;AACpB,QAAIC,KAAJ;;AACA,QAAID,KAAK,KAAK,OAAd,EAAuB;AACnBC,MAAAA,KAAK,GAAG,WAAR;AACH;;AACD,WAAOA,KAAP;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAEI,oBAAC,MAAD;AACI,MAAA,aAAa,EAAE;AACXC,QAAAA,QAAQ,EAAE,EADC;AAEXC,QAAAA,KAAK,EAAE;AAFI,OADnB;AAKI,MAAA,QAAQ,EAAEC,MAAM,IAAI;AAChB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,OARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUK,CAAC;AAAEG,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,KAAD,KACG,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,QAAQ,EAAEb,aAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEKW,MAAM,CAACJ,KAAP,IAAgBK,OAAO,CAACL,KAAxB,IAAiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMI,MAAM,CAACJ,KAAb,CAFtC,EAII,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,QAAQ,EAAEH,gBAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJJ,EAKKO,MAAM,CAACL,QAAP,IAAmBM,OAAO,CAACN,QAA3B,IAAuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMK,MAAM,CAACL,QAAb,CAL5C,EAOI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPJ,CAXR,CAFJ,CADJ;AA2BH;;AAhFoC;;AAmFzC,eAAe7B,gBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        monthsWorkingHours: [],\r\n        workingHoursInMonth: 0,\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({ monthsWorkingHours: response.data })\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n        this.setState({ isSummaryVisible: false });\r\n    }\r\n\r\n    validateEmail(value) {\r\n        let error;\r\n        if (!value) {\r\n            error = 'Required';\r\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\r\n            error = 'Invalid email address';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateUsername(value) {\r\n        let error;\r\n        if (value === 'admin') {\r\n            error = 'Nice try!';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Signup</h1>\r\n                <Formik\r\n                    initialValues={{\r\n                        username: '',\r\n                        email: '',\r\n                    }}\r\n                    onSubmit={values => {\r\n                        // same shape as initial values\r\n                        console.log(values);\r\n                    }}\r\n                >\r\n                    {({ errors, touched, isValidating }) => (\r\n                        <Form>\r\n                            <Field name=\"email\" validate={validateEmail} />\r\n                            {errors.email && touched.email && <div>{errors.email}</div>}\r\n\r\n                            <Field name=\"username\" validate={validateUsername} />\r\n                            {errors.username && touched.username && <div>{errors.username}</div>}\r\n\r\n                            <button type=\"submit\">Submit</button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalculatorInputs;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorForm\\\\CalculatorForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, Formik } from 'formik';\nimport Axios from 'axios';\nimport './CalculatorForm.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorForm extends Component {\n  render() {\n    return React.createElement(Formik, {\n      initialValues: {\n        workedHoursInput: '',\n        hourlyFeeInput: ''\n      },\n      onSubmit: formFields => {\n        this.setState({\n          errorMessage: null\n        });\n        let workedMonth = this.state.workedMonth;\n        formFields = _objectSpread({}, formFields, {\n          workedMonth\n        });\n        formFields.workedHours = parseInt(formFields.workedHoursInput);\n        formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\n\n        if (isNaN(formFields.workedHours) || isNaN(formFields.hourlyFee)) {\n          this.setState({\n            errorMessage: \"Invalid input.\"\n          });\n        } else {\n          Axios.post('http://192.168.0.5:5000/salarycalculator', formFields).then(response => {\n            console.log(response.data);\n            this.setState({\n              isSummaryVisible: true,\n              workedHours: formFields.workedHoursInput,\n              hourlyFee: formFields.hourlyFeeInput,\n              overHoursAmount: response.data.overHoursAmount,\n              overHoursGrossIncome: response.data.overHoursGrossIncome,\n              overHoursNetIncome: response.data.overHoursNetIncome,\n              totalGrossIncome: response.data.totalGrossIncome,\n              totalNetIncome: response.data.totalNetIncome\n            });\n          }).catch(error => {\n            if (!isNullOrUndefined(error.response.data.message)) {\n              this.setState({\n                errorMessage: error.response.data.message\n              });\n            }\n\n            console.log(error.response);\n          });\n        }\n      },\n      onReset: () => {\n        this.setState({\n          errorMessage: null,\n          isSummaryVisible: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(Form, {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"workedHoursInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Worked Hours:\"), React.createElement(Field, {\n      validate: this.validateWorkedHoursInput,\n      name: \"workedHoursInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }), errors.workedHoursInput && touched.workedHoursInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, errors.workedHoursInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"Month:\"), React.createElement(DynamicSelect, {\n      monthName: this.state.monthName,\n      monthsWorkingHours: this.state.monthsWorkingHours,\n      onSelectChange: this.handleSelectChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"hourlyFeeInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Hourly Fee:\"), React.createElement(Field, {\n      validate: this.validateHourlyFeeInput,\n      name: \"hourlyFeeInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), errors.hourlyFeeInput && touched.hourlyFeeInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, errors.hourlyFeeInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"button\",\n      type: \"submit\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Calculate!\"), React.createElement(Button, {\n      className: \"button\",\n      type: \"reset\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.state.errorMessage)));\n  }\n\n}\n\nexport default CalculatorForm;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorForm/CalculatorForm.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","Formik","Axios","DynamicSelect","isNullOrUndefined","CalculatorForm","render","workedHoursInput","hourlyFeeInput","formFields","setState","errorMessage","workedMonth","state","workedHours","parseInt","hourlyFee","isNaN","post","then","response","console","log","data","isSummaryVisible","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","catch","error","message","errors","touched","validateWorkedHoursInput","monthName","monthsWorkingHours","handleSelectChange","validateHourlyFeeInput"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport Axios from 'axios';\r\nimport './CalculatorForm.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorForm extends Component {\r\n    render () {\r\n        return(\r\n            <Formik\r\n                    initialValues={{\r\n                        workedHoursInput: '',\r\n                        hourlyFeeInput: '',\r\n                    }}\r\n                    onSubmit={formFields => {                    \r\n                    this.setState({ errorMessage: null });\r\n                    let workedMonth = this.state.workedMonth;\r\n                    formFields = {\r\n                        ...formFields,\r\n                        workedMonth\r\n                    };\r\n                    formFields.workedHours = parseInt(formFields.workedHoursInput);\r\n                    formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\r\n                    if (isNaN(formFields.workedHours) || isNaN(formFields.hourlyFee)) {\r\n                        this.setState({ errorMessage: \"Invalid input.\" });\r\n                    } else {\r\n                        Axios.post('http://192.168.0.5:5000/salarycalculator', formFields)\r\n                            .then(response => {\r\n                                console.log(response.data)\r\n                                this.setState({\r\n                                    isSummaryVisible: true,\r\n                                    workedHours: formFields.workedHoursInput,\r\n                                    hourlyFee: formFields.hourlyFeeInput,\r\n                                    overHoursAmount: response.data.overHoursAmount,\r\n                                    overHoursGrossIncome: response.data.overHoursGrossIncome,\r\n                                    overHoursNetIncome: response.data.overHoursNetIncome,\r\n                                    totalGrossIncome: response.data.totalGrossIncome,\r\n                                    totalNetIncome: response.data.totalNetIncome\r\n                                })\r\n                            })\r\n                            .catch(error => {\r\n                                if (!isNullOrUndefined(error.response.data.message)) {\r\n                                    this.setState({ errorMessage: error.response.data.message })\r\n                                }\r\n                                console.log(error.response);\r\n                            })\r\n                    }\r\n                }}\r\n                onReset={() => {\r\n                    this.setState({ \r\n                        errorMessage: null,\r\n                        isSummaryVisible: false });\r\n                }}\r\n                >\r\n                    {({ errors, touched }) => (\r\n                        <Form className=\"form\">\r\n                            <FormGroup>\r\n                                <Label className=\"label\" for=\"workedHoursInput\">Worked Hours:</Label>\r\n                                <Field validate={this.validateWorkedHoursInput} name=\"workedHoursInput\" type=\"name\"\r\n                                    className={'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : '')} />\r\n                                {errors.workedHoursInput && touched.workedHoursInput && <div className=\"error-message\">{errors.workedHoursInput}</div>}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label className=\"label\">Month:</Label>\r\n                                <DynamicSelect\r\n                                    monthName={this.state.monthName}\r\n                                    monthsWorkingHours={this.state.monthsWorkingHours}\r\n                                    onSelectChange={this.handleSelectChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label className=\"label\" for=\"hourlyFeeInput\">Hourly Fee:</Label>\r\n                                <Field validate={this.validateHourlyFeeInput} name=\"hourlyFeeInput\" type=\"name\"\r\n                                    className={'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : '')} />\r\n                                {errors.hourlyFeeInput && touched.hourlyFeeInput && <div className=\"error-message\">{errors.hourlyFeeInput}</div>}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Button className=\"button\" type=\"submit\" color=\"secondary\">Calculate!</Button>\r\n                                <Button className=\"button\" type=\"reset\" color=\"secondary\">Reset</Button>\r\n                            </FormGroup>\r\n                            <div className=\"error-message\">\r\n                                {this.state.errorMessage}\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CalculatorForm;"]},"metadata":{},"sourceType":"module"}
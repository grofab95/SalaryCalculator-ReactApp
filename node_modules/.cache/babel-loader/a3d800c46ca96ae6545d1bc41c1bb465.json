{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      monthsWorkingHours: [],\n      workingHoursInMonth: 0,\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        this.setState({\n          monthsWorkingHours: response.data\n        });\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {\n      this.setState({\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, \"Any place in your app!\"), React.createElement(Formik, {\n      initialValues: {\n        email: '',\n        password: ''\n      },\n      validate: values => {\n        const errors = {};\n\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n          errors.email = 'Invalid email address';\n        }\n\n        return errors;\n      },\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          setSubmitting(false);\n        }, 400);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, ({\n      isSubmitting\n    }) => React.createElement(Form, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Field, {\n      type: \"email\",\n      name: \"email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"email\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(Field, {\n      type: \"password\",\n      name: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(ErrorMessage, {\n      name: \"password\",\n      component: \"div\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      disabled: isSubmitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Submit\"))));\n  }\n\n}\n\nexport default CalculatorInputs;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","ErrorMessage","Formik","Yup","Axios","DynamicSelect","CalculatorSummary","isNullOrUndefined","CalculatorInputs","state","monthsWorkingHours","workingHoursInMonth","errorMessage","isSummaryVisible","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","setState","data","handleSelectChange","selectedValue","parseInt","handleCloseSummary","render","email","password","values","errors","test","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,SAAjB,EAA4BC,KAA5B,QAAyC,YAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,YAAtB,EAAoCC,MAApC,QAAkD,QAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,wBAAP;AAEA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,OAAOC,iBAAP,MAA8B,wCAA9B;AACA,SAASC,iBAAT,QAAkC,MAAlC;;AAEA,MAAMC,gBAAN,SAA+Bb,SAA/B,CAAyC;AAAA;AAAA;AAAA,SACrCc,KADqC,GAC7B;AACJC,MAAAA,kBAAkB,EAAE,EADhB;AAEJC,MAAAA,mBAAmB,EAAE,CAFjB;AAGJC,MAAAA,YAAY,EAAE,EAHV;AAIJC,MAAAA,gBAAgB,EAAE,KAJd;AAKJC,MAAAA,WAAW,EAAE,CALT;AAMJC,MAAAA,eAAe,EAAE,CANb;AAOJC,MAAAA,oBAAoB,EAAE,CAPlB;AAQJC,MAAAA,kBAAkB,EAAE,CARhB;AASJC,MAAAA,gBAAgB,EAAE,CATd;AAUJC,MAAAA,cAAc,EAAE,CAVZ;AAWJC,MAAAA,SAAS,EAAE,CACP,SADO,EACI,UADJ,EACgB,OADhB,EACyB,OADzB,EACkC,KADlC,EACyC,MADzC,EACiD,MADjD,EACyD,QADzD,EACmE,WADnE,EACgF,SADhF,EAC2F,UAD3F,EACuG,UADvG;AAXP,KAD6B;;AAAA,SAiBrCC,iBAjBqC,GAiBjB,MAAM;AACtBjB,MAAAA,KAAK,CAACkB,GAAN,CAAU,0CAAV,EACKC,IADL,CACUC,QAAQ,IAAI;AACd,aAAKC,QAAL,CAAc;AAAEf,UAAAA,kBAAkB,EAAEc,QAAQ,CAACE;AAA/B,SAAd;AACH,OAHL;AAIH,KAtBoC;;AAAA,SAwBrCC,kBAxBqC,GAwBfC,aAAD,IAAmB;AACpC,WAAKH,QAAL,CAAc;AACVX,QAAAA,WAAW,EAAEe,QAAQ,CAACD,aAAD,CAAR,GAA0B;AAD7B,OAAd;AAGH,KA5BoC;;AAAA,SA8BrCE,kBA9BqC,GA8BhB,MAAM;AACvB,WAAKL,QAAL,CAAc;AAAEZ,QAAAA,gBAAgB,EAAE;AAApB,OAAd;AACH,KAhCoC;AAAA;;AAkCrCkB,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADQ,EAER,oBAAC,MAAD;AACE,MAAA,aAAa,EAAE;AAAEC,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,QAAQ,EAAE;AAAvB,OADjB;AAEE,MAAA,QAAQ,EAAEC,MAAM,IAAI;AAClB,cAAMC,MAAM,GAAG,EAAf;;AACA,YAAI,CAACD,MAAM,CAACF,KAAZ,EAAmB;AACjBG,UAAAA,MAAM,CAACH,KAAP,GAAe,UAAf;AACD,SAFD,MAEO,IACL,CAAC,2CAA2CI,IAA3C,CAAgDF,MAAM,CAACF,KAAvD,CADI,EAEL;AACAG,UAAAA,MAAM,CAACH,KAAP,GAAe,uBAAf;AACD;;AACD,eAAOG,MAAP;AACD,OAZH;AAaE,MAAA,QAAQ,EAAE,CAACD,MAAD,EAAS;AAAEG,QAAAA;AAAF,OAAT,KAA+B;AACvCC,QAAAA,UAAU,CAAC,MAAM;AACfC,UAAAA,KAAK,CAACC,IAAI,CAACC,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAD,CAAL;AACAG,UAAAA,aAAa,CAAC,KAAD,CAAb;AACD,SAHS,EAGP,GAHO,CAAV;AAID,OAlBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAoBG,CAAC;AAAEK,MAAAA;AAAF,KAAD,KACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,IAAI,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,OAAnB;AAA2B,MAAA,SAAS,EAAC,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,IAAI,EAAC,UAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAIE,oBAAC,YAAD;AAAc,MAAA,IAAI,EAAC,UAAnB;AAA8B,MAAA,SAAS,EAAC,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAKE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,QAAQ,EAAEA,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CArBJ,CAFQ,CADJ;AAqCH;;AAxEoC;;AA2EzC,eAAelC,gBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        monthsWorkingHours: [],\r\n        workingHoursInMonth: 0,\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({ monthsWorkingHours: response.data })\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n        this.setState({ isSummaryVisible: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n    <h1>Any place in your app!</h1>\r\n    <Formik\r\n      initialValues={{ email: '', password: '' }}\r\n      validate={values => {\r\n        const errors = {};\r\n        if (!values.email) {\r\n          errors.email = 'Required';\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n        ) {\r\n          errors.email = 'Invalid email address';\r\n        }\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <Form>\r\n          <Field type=\"email\" name=\"email\" />\r\n          <ErrorMessage name=\"email\" component=\"div\" />\r\n          <Field type=\"password\" name=\"password\" />\r\n          <ErrorMessage name=\"password\" component=\"div\" />\r\n          <button type=\"submit\" disabled={isSubmitting}>\r\n            Submit\r\n          </button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalculatorInputs;"]},"metadata":{},"sourceType":"module"}
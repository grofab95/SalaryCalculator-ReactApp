{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\CalculatorInputs\\\\CalculatorInputs.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Button, FormGroup, Label } from 'reactstrap';\nimport { Form, Field, Formik } from 'formik';\nimport Axios from 'axios';\nimport './CalculatorInputs.css';\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\nimport { isNullOrUndefined } from 'util';\n\nclass CalculatorInputs extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      monthsWorkingHours: [],\n      workingHoursInMonth: 0,\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      overHoursAmount: 0,\n      overHoursGrossIncome: 0,\n      overHoursNetIncome: 0,\n      totalGrossIncome: 0,\n      totalNetIncome: 0,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    };\n\n    this.componentDidMount = () => {\n      Axios.get('http://192.168.0.5:5000/SalaryCalculator').then(response => {\n        this.setState({\n          monthsWorkingHours: response.data\n        });\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleCloseSummary = () => {\n      this.setState({\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  validateWorkedHoursInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Worked hours is required';\n    }\n\n    return error;\n  }\n\n  validateHourlyFeeInput(inputValue) {\n    let error;\n\n    if (!inputValue) {\n      error = 'Hourly fee is required';\n    }\n\n    return error;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Salary Calculator\"), React.createElement(Formik, {\n      initialValues: {\n        workedHoursInput: '',\n        hourlyFeeInput: ''\n      },\n      onSubmit: formFields => {\n        this.setState({\n          errorMessage: null\n        });\n        let workedMonth = this.state.workedMonth;\n        formFields = _objectSpread({}, formFields, {\n          workedMonth\n        });\n        formFields.workedHours = parseInt(formFields.workedHoursInput);\n        formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\n\n        if (isNaN(formFields.workedHours) || isNaN(formFields.hourlyFee)) {\n          this.setState({\n            errorMessage: \"Invalid input.\"\n          });\n        } else {\n          Axios.post('http://192.168.0.5:5000/salarycalculator', formFields).then(response => {\n            console.log(response.data);\n            this.setState({\n              isSummaryVisible: true,\n              workedHours: formFields.workedHoursInput,\n              hourlyFee: formFields.hourlyFeeInput,\n              overHoursAmount: response.data.overHoursAmount,\n              overHoursGrossIncome: response.data.overHoursGrossIncome,\n              overHoursNetIncome: response.data.overHoursNetIncome,\n              totalGrossIncome: response.data.totalGrossIncome,\n              totalNetIncome: response.data.totalNetIncome\n            });\n          }).catch(error => {\n            if (!isNullOrUndefined(error.response.data.message)) {\n              this.setState({\n                errorMessage: error.response.data.message\n              });\n            }\n\n            console.log(error.response);\n          });\n        }\n      },\n      onReset: () => {\n        this.setState({\n          errorMessage: null,\n          isSummaryVisible: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, ({\n      errors,\n      touched\n    }) => React.createElement(Form, {\n      className: \"form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"workedHoursInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Worked Hours:\"), React.createElement(Field, {\n      validate: this.validateWorkedHoursInput,\n      name: \"workedHoursInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), errors.workedHoursInput && touched.workedHoursInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, errors.workedHoursInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Month:\"), React.createElement(DynamicSelect, {\n      monthName: this.state.monthName,\n      monthsWorkingHours: this.state.monthsWorkingHours,\n      onSelectChange: this.handleSelectChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    })), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(Label, {\n      className: \"label\",\n      for: \"hourlyFeeInput\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, \"Hourly Fee:\"), React.createElement(Field, {\n      validate: this.validateHourlyFeeInput,\n      name: \"hourlyFeeInput\",\n      type: \"name\",\n      className: 'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : ''),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), errors.hourlyFeeInput && touched.hourlyFeeInput && React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, errors.hourlyFeeInput)), React.createElement(FormGroup, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Button, {\n      className: \"button\",\n      type: \"submit\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Calculate!\"), React.createElement(Button, {\n      className: \"button\",\n      type: \"reset\",\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Reset\")), React.createElement(\"div\", {\n      className: \"error-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.state.errorMessage))), this.state.isSummaryVisible ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(CalculatorSummary, {\n      workedMonthName: this.state.monthName[this.state.workedMonth - 1],\n      workingHoursInMonth: this.state.monthsWorkingHours[this.state.workedMonth - 1],\n      workedHours: this.state.workedHours,\n      hourlyFee: this.state.hourlyFee,\n      overHoursAmount: this.state.overHoursAmount,\n      overHoursGrossIncome: this.state.overHoursGrossIncome,\n      overHoursNetIncome: this.state.overHoursNetIncome,\n      totalGrossIncome: this.state.totalGrossIncome,\n      totalNetIncome: this.state.totalNetIncome,\n      handleCloseSummary: this.handleCloseSummary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }), \" \") : \"\");\n  }\n\n}\n\nexport default CalculatorInputs;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/CalculatorInputs/CalculatorInputs.js"],"names":["React","Component","Button","FormGroup","Label","Form","Field","Formik","Axios","DynamicSelect","CalculatorSummary","isNullOrUndefined","CalculatorInputs","state","monthsWorkingHours","workingHoursInMonth","errorMessage","isSummaryVisible","workedMonth","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthName","componentDidMount","get","then","response","setState","data","handleSelectChange","selectedValue","parseInt","handleCloseSummary","validateWorkedHoursInput","inputValue","error","validateHourlyFeeInput","render","workedHoursInput","hourlyFeeInput","formFields","workedHours","hourlyFee","isNaN","post","console","log","catch","message","errors","touched"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, FormGroup, Label } from 'reactstrap';\r\nimport { Form, Field, Formik } from 'formik';\r\nimport Axios from 'axios';\r\nimport './CalculatorInputs.css';\r\n\r\nimport DynamicSelect from '../DynamicSelect/DynamicSelect';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nclass CalculatorInputs extends Component {\r\n    state = {\r\n        monthsWorkingHours: [],\r\n        workingHoursInMonth: 0,\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        overHoursAmount: 0,\r\n        overHoursGrossIncome: 0,\r\n        overHoursNetIncome: 0,\r\n        totalGrossIncome: 0,\r\n        totalNetIncome: 0,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ]\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        Axios.get('http://192.168.0.5:5000/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({ monthsWorkingHours: response.data })\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleCloseSummary = () => {\r\n        this.setState({ isSummaryVisible: false });\r\n    }\r\n\r\n    validateWorkedHoursInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Worked hours is required';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    validateHourlyFeeInput(inputValue) {\r\n        let error;\r\n        if (!inputValue) {\r\n            error = 'Hourly fee is required';\r\n        }\r\n        return error;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Salary Calculator</h1>\r\n                <Formik\r\n                    initialValues={{\r\n                        workedHoursInput: '',\r\n                        hourlyFeeInput: '',\r\n                    }}\r\n                    onSubmit={formFields => {                    \r\n                    this.setState({ errorMessage: null });\r\n                    let workedMonth = this.state.workedMonth;\r\n                    formFields = {\r\n                        ...formFields,\r\n                        workedMonth\r\n                    };\r\n                    formFields.workedHours = parseInt(formFields.workedHoursInput);\r\n                    formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\r\n                    if (isNaN(formFields.workedHours) || isNaN(formFields.hourlyFee)) {\r\n                        this.setState({ errorMessage: \"Invalid input.\" });\r\n                    } else {\r\n                        Axios.post('http://192.168.0.5:5000/salarycalculator', formFields)\r\n                            .then(response => {\r\n                                console.log(response.data)\r\n                                this.setState({\r\n                                    isSummaryVisible: true,\r\n                                    workedHours: formFields.workedHoursInput,\r\n                                    hourlyFee: formFields.hourlyFeeInput,\r\n                                    overHoursAmount: response.data.overHoursAmount,\r\n                                    overHoursGrossIncome: response.data.overHoursGrossIncome,\r\n                                    overHoursNetIncome: response.data.overHoursNetIncome,\r\n                                    totalGrossIncome: response.data.totalGrossIncome,\r\n                                    totalNetIncome: response.data.totalNetIncome\r\n                                })\r\n                            })\r\n                            .catch(error => {\r\n                                if (!isNullOrUndefined(error.response.data.message)) {\r\n                                    this.setState({ errorMessage: error.response.data.message })\r\n                                }\r\n                                console.log(error.response);\r\n                            })\r\n                    }\r\n                }}\r\n                onReset={() => {\r\n                    this.setState({ \r\n                        errorMessage: null,\r\n                        isSummaryVisible: false });\r\n                }}\r\n                >\r\n                    {({ errors, touched }) => (\r\n                        <Form className=\"form\">\r\n                            <FormGroup>\r\n                                <Label className=\"label\" for=\"workedHoursInput\">Worked Hours:</Label>\r\n                                <Field validate={this.validateWorkedHoursInput} name=\"workedHoursInput\" type=\"name\"\r\n                                    className={'form-control' + (errors.workedHoursInput && errors.workedHoursInput ? ' is-invalid' : '')} />\r\n                                {errors.workedHoursInput && touched.workedHoursInput && <div className=\"error-message\">{errors.workedHoursInput}</div>}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label className=\"label\">Month:</Label>\r\n                                <DynamicSelect\r\n                                    monthName={this.state.monthName}\r\n                                    monthsWorkingHours={this.state.monthsWorkingHours}\r\n                                    onSelectChange={this.handleSelectChange} />\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Label className=\"label\" for=\"hourlyFeeInput\">Hourly Fee:</Label>\r\n                                <Field validate={this.validateHourlyFeeInput} name=\"hourlyFeeInput\" type=\"name\"\r\n                                    className={'form-control' + (errors.hourlyFeeInput && errors.hourlyFeeInput ? ' is-invalid' : '')} />\r\n                                {errors.hourlyFeeInput && touched.hourlyFeeInput && <div className=\"error-message\">{errors.hourlyFeeInput}</div>}\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <Button className=\"button\" type=\"submit\" color=\"secondary\">Calculate!</Button>\r\n                                <Button className=\"button\" type=\"reset\" color=\"secondary\">Reset</Button>\r\n                            </FormGroup>\r\n                            <div className=\"error-message\">\r\n                                {this.state.errorMessage}\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                {this.state.isSummaryVisible ? <div><CalculatorSummary\r\n                            workedMonthName={this.state.monthName[this.state.workedMonth - 1]}\r\n                            workingHoursInMonth={this.state.monthsWorkingHours[this.state.workedMonth - 1]}\r\n                            workedHours={this.state.workedHours}\r\n                            hourlyFee={this.state.hourlyFee}\r\n                            overHoursAmount={this.state.overHoursAmount}\r\n                            overHoursGrossIncome={this.state.overHoursGrossIncome}\r\n                            overHoursNetIncome={this.state.overHoursNetIncome}\r\n                            totalGrossIncome={this.state.totalGrossIncome}\r\n                            totalNetIncome={this.state.totalNetIncome}\r\n                            handleCloseSummary={this.handleCloseSummary}\r\n                        /> </div> : \"\"}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CalculatorInputs;"]},"metadata":{},"sourceType":"module"}
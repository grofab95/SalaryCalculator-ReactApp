{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\Fabian\\\\source\\\\repos\\\\SalaryCalculator\\\\salarycalulator-reactapp\\\\src\\\\components\\\\SalaryCalculator\\\\Calculator\\\\Calculator.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport axios from '../../../axios-order';\nimport { isNullOrUndefined } from 'util';\nimport { Spinner } from 'reactstrap';\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\nimport './Calculator.css';\nimport CalculatorForm from '.././CalculatorForm/CalculatorForm';\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary'; //import withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\n\nimport GeneralModal from '../../UI/GeneralModal/GeneralModal';\n\nclass Calculator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      summary: {\n        workingHoursInMonth: 0,\n        workedHours: 0,\n        hourlyFee: 0,\n        overHoursAmount: 0,\n        overHoursGrossIncome: 0,\n        overHoursNetIncome: 0,\n        totalGrossIncome: 0,\n        totalNetIncome: 0\n      },\n      monthsWorkingHours: [],\n      errorMessage: '',\n      isSummaryVisible: false,\n      workedMonth: 1,\n      monthName: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      isLoading: true\n    };\n\n    this.componentDidMount = () => {\n      this.setState(prevState => ({\n        summary: _objectSpread({}, prevState.summary, {\n          hourlyFee: 5,\n          workedHours: 17\n        })\n      }));\n      axios.get('/SalaryCalculator').then(response => {\n        this.setState({\n          monthsWorkingHours: response.data,\n          isLoading: false\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.handleSelectChange = selectedValue => {\n      this.setState({\n        workedMonth: parseInt(selectedValue) + 1\n      });\n    };\n\n    this.handleSubmitForm = formFields => {\n      this.setState({\n        errorMessage: null\n      });\n      formFields.workedHours = parseInt(formFields.workedHoursInput);\n      formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\n      axios.post('/salarycalculator', formFields).then(response => {\n        console.log(response.data);\n        this.setState(prevState => ({\n          summary: _objectSpread({}, prevState.summary, {\n            workedMonth: formFields.workedMonth,\n            workedHours: formFields.workedHoursInput,\n            hourlyFee: formFields.hourlyFeeInput,\n            overHoursAmount: response.data.overHoursAmount,\n            overHoursGrossIncome: response.data.overHoursGrossIncome,\n            overHoursNetIncome: response.data.overHoursNetIncome,\n            totalGrossIncome: response.data.totalGrossIncome,\n            totalNetIncome: response.data.totalNetIncome\n          })\n        }));\n      }).catch(error => {\n        if (!isNullOrUndefined(error.response.data.message)) {\n          this.setState({\n            errorMessage: error.response.data.message\n          });\n        }\n\n        console.log(error.response);\n      });\n    };\n\n    this.handleReset = () => {\n      this.setState({\n        errorMessage: null,\n        isSummaryVisible: false\n      });\n    };\n  }\n\n  render() {\n    let calculatorContent = null;\n\n    if (this.state.isLoading) {\n      calculatorContent = React.createElement(Spinner, {\n        animation: \"border\",\n        variant: \"primary\",\n        className: \"spinner\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      });\n    } else {\n      calculatorContent = React.createElement(Aux, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(CalculatorForm, {\n        monthName: this.state.monthName,\n        errorMessage: this.state.errorMessage,\n        monthsWorkingHours: this.state.monthsWorkingHours,\n        handleSubmitForm: this.handleSubmitForm,\n        handleReset: this.handleReset,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(GeneralModal, {\n        showModal: this.state.isSummaryVisible,\n        modalClosed: this.handleReset,\n        title: \"Summary\",\n        buttonName: \"Ok\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(CalculatorSummary //workedMonthName={this.state.monthName[this.state.workedMonth - 1]}\n      //workingHoursInMonth={this.state.monthsWorkingHours[this.state.workedMonth - 1]}\n      //workedHours={this.state.workedHours}\n      //hourlyFee={this.state.hourlyFee}\n      //overHoursAmount={this.state.overHoursAmount}\n      //overHoursGrossIncome={this.state.overHoursGrossIncome}\n      //overHoursNetIncome={this.state.overHoursNetIncome}\n      //totalGrossIncome={this.state.totalGrossIncome}\n      //totalNetIncome={this.state.totalNetIncome}\n      , {\n        summaryFactors: this.state.summary,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      })));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"Salary Calculator\"), calculatorContent);\n  }\n\n} //export default withErrorHandler(Calculator, axios);\n\n\nexport default Calculator;","map":{"version":3,"sources":["C:/Users/Fabian/source/repos/SalaryCalculator/salarycalulator-reactapp/src/components/SalaryCalculator/Calculator/Calculator.js"],"names":["React","Component","axios","isNullOrUndefined","Spinner","Aux","CalculatorForm","CalculatorSummary","GeneralModal","Calculator","state","summary","workingHoursInMonth","workedHours","hourlyFee","overHoursAmount","overHoursGrossIncome","overHoursNetIncome","totalGrossIncome","totalNetIncome","monthsWorkingHours","errorMessage","isSummaryVisible","workedMonth","monthName","isLoading","componentDidMount","setState","prevState","get","then","response","data","catch","error","console","log","handleSelectChange","selectedValue","parseInt","handleSubmitForm","formFields","workedHoursInput","hourlyFeeInput","post","message","handleReset","render","calculatorContent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from '../../../axios-order';\r\nimport { isNullOrUndefined } from 'util';\r\nimport { Spinner } from 'reactstrap';\r\nimport Aux from '../../../hoc/Auxiliary/Auxiliary';\r\nimport './Calculator.css';\r\nimport CalculatorForm from '.././CalculatorForm/CalculatorForm';\r\nimport CalculatorSummary from '../CalculatorSummary/CalculatorSummary';\r\n//import withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport GeneralModal from '../../UI/GeneralModal/GeneralModal';\r\n\r\n\r\nclass Calculator extends Component {\r\n    state = {\r\n        summary: {\r\n            workingHoursInMonth: 0,\r\n            workedHours: 0,\r\n            hourlyFee: 0,\r\n            overHoursAmount: 0,\r\n            overHoursGrossIncome: 0,\r\n            overHoursNetIncome: 0,\r\n            totalGrossIncome: 0,\r\n            totalNetIncome: 0\r\n        },\r\n        monthsWorkingHours: [],\r\n        errorMessage: '',\r\n        isSummaryVisible: false,\r\n        workedMonth: 1,\r\n        monthName: [\r\n            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'\r\n        ],\r\n        isLoading: true\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState(prevState => ({\r\n            summary: {\r\n                ...prevState.summary,\r\n                hourlyFee: 5,\r\n                workedHours: 17\r\n            }\r\n        }))\r\n\r\n        axios.get('/SalaryCalculator')\r\n            .then(response => {\r\n                this.setState({\r\n                    monthsWorkingHours: response.data,\r\n                    isLoading: false\r\n                })\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n            })\r\n    }\r\n\r\n    handleSelectChange = (selectedValue) => {\r\n        this.setState({\r\n            workedMonth: parseInt(selectedValue) + 1\r\n        });\r\n    }\r\n\r\n    handleSubmitForm = (formFields) => {\r\n        this.setState({\r\n            errorMessage: null,\r\n        });\r\n        formFields.workedHours = parseInt(formFields.workedHoursInput);\r\n        formFields.hourlyFee = parseInt(formFields.hourlyFeeInput);\r\n        axios.post('/salarycalculator', formFields)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                this.setState(prevState => ({\r\n                    summary: {\r\n                        ...prevState.summary,\r\n                        workedMonth: formFields.workedMonth,\r\n                        workedHours: formFields.workedHoursInput,\r\n                        hourlyFee: formFields.hourlyFeeInput,\r\n                        overHoursAmount: response.data.overHoursAmount,\r\n                        overHoursGrossIncome: response.data.overHoursGrossIncome,\r\n                        overHoursNetIncome: response.data.overHoursNetIncome,\r\n                        totalGrossIncome: response.data.totalGrossIncome,\r\n                        totalNetIncome: response.data.totalNetIncome\r\n                    }\r\n                }))\r\n            })\r\n            .catch(error => {\r\n                if (!isNullOrUndefined(error.response.data.message)) {\r\n                    this.setState({ errorMessage: error.response.data.message })\r\n                }\r\n                console.log(error.response);\r\n            })\r\n\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({\r\n            errorMessage: null,\r\n            isSummaryVisible: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let calculatorContent = null;\r\n        if (this.state.isLoading) {\r\n            calculatorContent = (\r\n                <Spinner animation=\"border\" variant=\"primary\" className=\"spinner\" />\r\n            )\r\n        } else {\r\n            calculatorContent = (\r\n                <Aux>\r\n                    <CalculatorForm\r\n                        monthName={this.state.monthName}\r\n                        errorMessage={this.state.errorMessage}\r\n                        monthsWorkingHours={this.state.monthsWorkingHours}\r\n                        handleSubmitForm={this.handleSubmitForm}\r\n                        handleReset={this.handleReset}\r\n                    />\r\n                    <GeneralModal\r\n                        showModal={this.state.isSummaryVisible}\r\n                        modalClosed={this.handleReset}\r\n                        title=\"Summary\"\r\n                        buttonName=\"Ok\">\r\n                        <CalculatorSummary\r\n                            //workedMonthName={this.state.monthName[this.state.workedMonth - 1]}\r\n                            //workingHoursInMonth={this.state.monthsWorkingHours[this.state.workedMonth - 1]}\r\n                            //workedHours={this.state.workedHours}\r\n                            //hourlyFee={this.state.hourlyFee}\r\n                            //overHoursAmount={this.state.overHoursAmount}\r\n                            //overHoursGrossIncome={this.state.overHoursGrossIncome}\r\n                            //overHoursNetIncome={this.state.overHoursNetIncome}\r\n                            //totalGrossIncome={this.state.totalGrossIncome}\r\n                            //totalNetIncome={this.state.totalNetIncome}\r\n                            summaryFactors={this.state.summary}\r\n                        />\r\n                    </GeneralModal>\r\n                </Aux>\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Salary Calculator</h1>\r\n                {calculatorContent}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//export default withErrorHandler(Calculator, axios);\r\nexport default Calculator;"]},"metadata":{},"sourceType":"module"}